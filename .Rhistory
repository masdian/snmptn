# dplyr::filter(Country.Region == "Belgium") %>%
dplyr::filter(cases > 0) %>%
dplyr::group_by(Country.Region, Province.State, Lat, Long, type) %>%
dplyr::summarise(cases = sum(cases)) %>%
dplyr::mutate(log_cases = 2 * log(cases)) %>%
dplyr::ungroup()
cv_data_for_plot.split <- cv_data_for_plot %>% split(cv_data_for_plot$type)
pal <- colorFactor(c("orange", "red", "green"), domain = c("confirmed", "death", "recovered"))
map_object <- leaflet() %>% addProviderTiles(providers$Stamen.Toner)
names(cv_data_for_plot.split) %>%
purrr::walk(function(df) {
map_object <<- map_object %>%
addCircleMarkers(
data = cv_data_for_plot.split[[df]],
lng = ~Long, lat = ~Lat,
#                 label=~as.character(cases),
color = ~ pal(type),
stroke = FALSE,
fillOpacity = 0.8,
radius = ~log_cases,
popup = leafpop::popupTable(cv_data_for_plot.split[[df]],
feature.id = FALSE,
row.numbers = FALSE,
zcol = c("type", "cases", "Country.Region", "Province.State")
),
group = df,
#                 clusterOptions = markerClusterOptions(removeOutsideVisibleBounds = F),
labelOptions = labelOptions(
noHide = F,
direction = "auto"
)
)
})
map_object %>%
addLayersControl(
overlayGroups = names(cv_data_for_plot.split),
options = layersControlOptions(collapsed = FALSE)
)
map_object %>%
addLayersControl(
overlayGroups = names(cv_data_for_plot.split),
options = layersControlOptions(collapsed = TRUE)
)
names(cv_data_for_plot.split) %>%
purrr::walk(function(df) {
map_object <<- map_object %>%
addCircleMarkers(
data = cv_data_for_plot.split[[df]],
lng = ~Long, lat = ~Lat,
#                 label=~as.character(cases),
color = ~ pal(type),
stroke = FALSE,
fillOpacity = 0.8,
radius = ~log_cases,
popup = leafpop::popupTable(cv_data_for_plot.split[[df]],
feature.id = FALSE,
row.numbers = FALSE,
zcol = c("type", "cases", "Country.Region", "Province.State")
),
group = df,
clusterOptions = markerClusterOptions(removeOutsideVisibleBounds = F),
labelOptions = labelOptions(
noHide = F,
direction = "auto"
)
)
})
map_object %>%
addLayersControl(
overlayGroups = names(cv_data_for_plot.split),
options = layersControlOptions(collapsed = FALSE)
)
names(cv_data_for_plot.split) %>%
purrr::walk(function(df) {
map_object <<- map_object %>%
addCircleMarkers(
data = cv_data_for_plot.split[[df]],
lng = ~Long, lat = ~Lat,
label=~as.character(cases),
color = ~ pal(type),
stroke = FALSE,
fillOpacity = 0.8,
radius = ~log_cases,
popup = leafpop::popupTable(cv_data_for_plot.split[[df]],
feature.id = FALSE,
row.numbers = FALSE,
zcol = c("type", "cases", "Country.Region", "Province.State")
),
group = df,
clusterOptions = markerClusterOptions(removeOutsideVisibleBounds = F),
labelOptions = labelOptions(
noHide = F,
direction = "auto"
)
)
})
map_object %>%
addLayersControl(
overlayGroups = names(cv_data_for_plot.split),
options = layersControlOptions(collapsed = FALSE)
)
library(coronavirus)
coronavirus::update_datasets()
coronavirus::coronavirus_spatial()
#------------------ Packages ------------------
library(flexdashboard)
data(coronavirus)
`%>%` <- magrittr::`%>%`
#------------------ Parameters ------------------
# Set colors
# https://www.w3.org/TR/css-color-3/#svg-color
confirmed_color <- "purple"
active_color <- "#1f77b4"
recovered_color <- "forestgreen"
death_color <- "red"
#------------------ Data ------------------
df <- coronavirus %>%
# dplyr::filter(date == max(date)) %>%
dplyr::filter(Country.Region == "Indonesia") %>%
dplyr::group_by(Country.Region, type) %>%
dplyr::summarise(total = sum(cases)) %>%
tidyr::pivot_wider(
names_from = type,
values_from = total
) %>%  # ifelse(is.na(recovered), 0, recovered) -
dplyr::mutate(unrecovered = confirmed - ifelse(is.na(death), 0, death)) %>%
dplyr::arrange(-confirmed) %>%
dplyr::ungroup() %>%
dplyr::mutate(country = dplyr::if_else(Country.Region == "United Arab Emirates", "UAE", Country.Region)) %>%
dplyr::mutate(country = dplyr::if_else(country == "Mainland China", "China", country)) %>%
dplyr::mutate(country = dplyr::if_else(country == "North Macedonia", "N.Macedonia", country)) %>%
dplyr::mutate(country = trimws(country)) %>%
dplyr::mutate(country = factor(country, levels = country))
df_daily <- coronavirus %>%
dplyr::filter(Country.Region == "Indonesia") %>%
dplyr::group_by(date, type) %>%
dplyr::summarise(total = sum(cases, na.rm = TRUE)) %>%
tidyr::pivot_wider(
names_from = type,
values_from = total
) %>%
dplyr::arrange(date) %>%
dplyr::ungroup() %>%
dplyr::mutate(active = confirmed - death) %>% #- recovered
dplyr::mutate(
confirmed_cum = cumsum(confirmed),
death_cum = cumsum(death),
#recovered_cum = cumsum(recovered),
active_cum = cumsum(active)
)
df1 <- coronavirus %>% dplyr::filter(date == max(date))
head(coronavirus)
df
dir()
library(flexdashboard)
library(shiny)
library(flexdashboard)
install.packages("fliptime")
install.packages("flipTime")
install.packages("remotes")
remotes::install_github("Displayr/flipTime")
library(flipTime)
?UpdateEvery
library(rsconnect)
rsconnect::setAccountInfo(name='masdian',
token='75D1649C0A8E8C382E9778B69DF9AC5D',
secret='mghOBdw/aEf4dZlqGQzKp4L4FiYLhRUUfa2CfEA6')
install.packages("dygraphs")
db <- read.csv("https://github.com/registrasi-untirta/snmptn/raw/master/snmptn.csv")
db
names(db)
install.packages("gt")
library(gt)
exibble
exibble %>% gt()
mtcars %>% gt()
library(gt)
library(tidyverse)
library(glue)
# Define the start and end dates for the data range
start_date <- "2010-06-07"
end_date <- "2010-06-14"
# Create a gt table based on preprocessed
# `sp500` table data
sp500 %>%
dplyr::filter(date >= start_date & date <= end_date) %>%
dplyr::select(-adj_close) %>%
gt() %>%
tab_header(
title = "S&P 500",
subtitle = glue::glue("{start_date} to {end_date}")
) %>%
fmt_date(
columns = vars(date),
date_style = 3
) %>%
fmt_currency(
columns = vars(open, high, low, close),
currency = "USD"
) %>%
fmt_number(
columns = vars(volume),
suffixing = TRUE
)
# Create a gt table based on preprocessed
# `sp500` table data
sp500 %>%
dplyr::filter(date >= start_date & date <= end_date) %>%
dplyr::select(-adj_close) %>%
gt() %>%
tab_header(
title = "S&P 500",
subtitle = glue::glue("{start_date} to {end_date}")
) %>%
fmt_date(
columns = vars(date),
date_style = 3
) %>%
fmt_currency(
columns = vars(open, high, low, close),
currency = "USD"
) %>%
fmt_number(
columns = vars(volume),
suffixing = F
)
# Create a gt table based on preprocessed
# `sp500` table data
sp500 %>%
dplyr::filter(date >= start_date & date <= end_date) %>%
dplyr::select(-adj_close) %>%
gt() %>%
tab_header(
title = "S&P 500",
subtitle = glue::glue("{start_date} to {end_date}")
) %>%
fmt_date(
columns = vars(date),
date_style = 3
) %>%
fmt_currency(
columns = vars(open, high, low, close),
currency = "USD"
) %>%
fmt_number(
columns = vars(volume),
suffixing = T
)
# Create a gt table based on preprocessed
# `sp500` table data
sp500 %>%
dplyr::filter(date >= start_date & date <= end_date) %>%
dplyr::select(-adj_close) %>%
gt() %>%
tab_header(
title = "S&P 500",
subtitle = glue::glue("{start_date} to {end_date}")
) %>%
fmt_date(
columns = vars(date),
date_style = 3
) %>%
fmt_currency(
columns = vars(open, high, low, close),
currency = "IDR"
) %>%
fmt_number(
columns = vars(volume),
suffixing = T
)
?date_style
# Create a gt table based on preprocessed
# `sp500` table data
sp500 %>%
dplyr::filter(date >= start_date & date <= end_date) %>%
dplyr::select(-adj_close) %>%
gt() %>%
tab_header(
title = "S&P 500",
subtitle = glue::glue("{start_date} to {end_date}")
) %>%
fmt_date(
columns = vars(date),
date_style = 1
) %>%
fmt_currency(
columns = vars(open, high, low, close),
currency = "IDR"
) %>%
fmt_number(
columns = vars(volume),
suffixing = T
)
# Create a gt table based on preprocessed
# `sp500` table data
sp500 %>%
dplyr::filter(date >= start_date & date <= end_date) %>%
dplyr::select(-adj_close) %>%
gt() %>%
tab_header(
title = "S&P 500",
subtitle = glue::glue("{start_date} to {end_date}")
) %>%
fmt_date(
columns = vars(date),
date_style = 2
) %>%
fmt_currency(
columns = vars(open, high, low, close),
currency = "IDR"
) %>%
fmt_number(
columns = vars(volume),
suffixing = T
)
# Create a gt table based on preprocessed
# `sp500` table data
sp500 %>%
dplyr::filter(date >= start_date & date <= end_date) %>%
dplyr::select(-adj_close) %>%
gt() %>%
tab_header(
title = "S&P 500",
subtitle = glue::glue("{start_date} to {end_date}")
) %>%
fmt_date(
columns = vars(date),
date_style = 4
) %>%
fmt_currency(
columns = vars(open, high, low, close),
currency = "IDR"
) %>%
fmt_number(
columns = vars(volume),
suffixing = T
)
# Create a gt table based on preprocessed
# `sp500` table data
sp500 %>%
dplyr::filter(date >= start_date & date <= end_date) %>%
dplyr::select(-adj_close) %>%
gt() %>%
tab_header(
title = "S&P 500",
subtitle = glue::glue("{start_date} to {end_date}")
) %>%
fmt_date(
columns = vars(date),
date_style = 3
) %>%
fmt_currency(
columns = vars(open, high, low, close),
currency = "IDR"
) %>%
fmt_number(
columns = vars(volume),
suffixing = T
)
db <- read.csv("snmptn.csv")
db
data <- db %>%
group_by(prodi) %>%
summarize(minat = max(peminat))
library(tidyverse)
data <- db %>%
group_by(prodi) %>%
summarize(minat = max(peminat))
data
sum(data$minat)
?colorRamp
colorRampPalette()
colorspaces
library(RColorBrewer)
display.brewer.all()
library(flexdashboard)
#db <- read.csv("https://github.com/registrasi-untirta/snmptn/raw/master/snmptn.csv")
db <- read.csv("snmptn.csv")
library(tidyverse)
data <- db %>%
group_by(prodi) %>%
summarize(minat = max(peminat))
library(flipTime)
UpdateEvery(1, "hours", options = "wakeup")
data <- db %>%
group_by(fakultas, prodi) %>%
summarize(pendaftar = max(peminat),
jml = n(),
belum = sum(registrasi == ""),
sudah = jml - belum)
data
sum(data$pendaftar)
data <- db %>%
group_by(fakultas, prodi) %>%
summarize(pendaftar = max(peminat),
lulus = n(),
belum = sum(registrasi == ""),
sudah = jml - belum)
data <- db %>%
group_by(fakultas, prodi) %>%
summarize(pendaftar = max(peminat),
lulus = n(),
belum = sum(registrasi == ""),
sudah = lulus - belum)
data <- db %>%
group_by(fakultas, prodi) %>%
summarize(pendaftar = max(peminat),
lulus = n(),
belum = sum(registrasi == ""),
sudah = lulus - belum)
data <- data %>%
group_by(fakultas) %>%
summarize(pendaftar = sum(pendaftar),
belum = sum(belum),
sudah = sum(sudah))
data
data <- db %>%
group_by(fakultas, prodi) %>%
summarize(pendaftar = max(peminat),
lulus = n(),
belum = sum(registrasi == ""),
sudah = lulus - belum)
data <- data %>%
group_by(fakultas) %>%
summarize(pendaftar = sum(pendaftar),
lulus = sum(lulus),
belum = sum(belum),
sudah = sum(sudah))
data
data <- select(data, fakultas, pendaftar, lulus, sudah, belum)
data
data$fakultas <- c("Hukum", "FKIP", "Teknik", "Pertanian",
"FEB", "FISIP", "Kedokteran")
data$fakultas <- c("Hukum", "FKIP", "Teknik", "Pertanian",
"FEB", "FISIP", "Kedokteran")
data$fakultas  <- factor(data$fakultas, levels = data[["fakultas"]])
plot_ly(data, x = ~fakultas, y = ~lulus, type = "bar", name = "Total") %>%
add_trace(y = ~sudah, name = "registrasi") %>%
layout(
title = "",
yaxis = list(title = ""),
xaxis = list(title = "Fakultas"),
hovermode = "compare"
)
library(plotly)
plot_ly(data, x = ~fakultas, y = ~lulus, type = "bar", name = "Total") %>%
add_trace(y = ~sudah, name = "registrasi") %>%
layout(
title = "",
yaxis = list(title = ""),
xaxis = list(title = "Fakultas"),
hovermode = "compare"
)
data
names(data) <- c("Fakultas", "Pendaftar", "Lulus", "Sudah", "Belum")
data <- adorn_totals(data, where = "row", name = "Total")
library(janitor)
data <- adorn_totals(data, where = "row", name = "Total")
data
kable(data) %>%
kable_styling(bootstrap_options = "striped", full_width = F,
latex_options = "scale_down") %>%
add_header_above(c(" " = 3, "Registrasi" = 2))
library(kableExtra)
kable(data) %>%
kable_styling(bootstrap_options = "striped", full_width = F,
latex_options = "scale_down") %>%
add_header_above(c(" " = 3, "Registrasi" = 2))
data <- db %>%
group_by(fakultas, prodi) %>%
summarize(pendaftar = max(peminat),
lulus = n(),
belum = sum(registrasi == ""),
sudah = lulus - belum)
data
data <- data[,c(2:4, 6, 5)]
data
data <- db %>%
group_by(fakultas, prodi) %>%
summarize(pendaftar = max(peminat),
lulus = n(),
belum = sum(registrasi == ""),
sudah = lulus - belum)
data <- data[,c(2:4, 6, 5)]
names(data) <- c("Fakultas/Program Studi", "Pendaftar", "Lulus", "Sudah", "Belum")
data <- adorn_totals(data,where = "row", name = "Total")
data
names(data)
kable(data, row.names = F) %>%
kable_styling(bootstrap_options = "striped", full_width = F,
latex_options = "scale_down") %>%
add_header_above(c(" " = 3, "Registrasi" = 2)) %>%
pack_rows("Hukum", 1, 1, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Keguruan dan Ilmu Pendidikan", 2, 19, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Teknik", 20, 25, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Pertanian", 26, 29, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Ekonomi dan Bisnis", 30, 33, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Ilmu Sosial dan Ilmu Politik", 34, 36, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Kedokteran", 37, 39, label_row_css = "background-color: #666; color: #fff;")
update.packages(ask=F)
library(readxl)
data <- read_excel("G:/My Drive/DATABASE MHS/Profil Mhs/2000.xls",
skip = 10)
data
View(data)
data <- read_excel("G:/My Drive/DATABASE MHS/Profil Mhs/201601.xls",
skip = 10)
data <- read_excel("G:/My Drive/DATABASE MHS/Profil Mhs/201601.xlsx",
skip = 10)
warnings()
View(data)
setwd("~/Dashboard")
