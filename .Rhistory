} else {
textInput(fun__arg, label = "Enter value:", value = input[[fun__arg]])
}
})
### Data import:
Dataset <- reactive({
if (is.null(input$file)) {
# User has not uploaded a file yet
return(data.frame())
}
args <- grep(paste0("^",input$readFunction,"__"), names(input), value = TRUE)
argList <- list()
for (i in seq_along(args))
{
argList[[i]] <- eval(parse(text=input[[args[i]]]))
}
names(argList) <- gsub(paste0("^",input$readFunction,"__"),"",args)
argList <- argList[names(argList) %in% ArgNames()]
Dataset <- as.data.frame(do.call(input$readFunction,c(list(input$file$datapath),argList)))
return(Dataset)
})
# Select variables:
output$varselect <- renderUI({
if (identical(Dataset(), '') || identical(Dataset(),data.frame())) return(NULL)
# Variable selection:
selectInput("vars", "Variables to use:",
names(Dataset()), names(Dataset()), multiple =TRUE)
})
# Show table:
output$table <- renderTable({
if (is.null(input$vars) || length(input$vars)==0) return(NULL)
return(Dataset()[,input$vars,drop=FALSE])
})
### Download dump:
output$downloadDump <- downloadHandler(
filename = "Rdata.R",
content = function(con) {
assign(input$name, Dataset()[,input$vars,drop=FALSE])
dump(input$name, con)
}
)
### Download save:
output$downloadSave <- downloadHandler(
filename = "Rdata.RData",
content = function(con) {
assign(input$name, Dataset()[,input$vars,drop=FALSE])
save(list=input$name, file=con)
}
)
})
library("shiny")
library("foreign")
ui <- pageWithSidebar(
# Header:
headerPanel("R data reader"),
# Input in sidepanel:
sidebarPanel(
tags$style(type='text/css', ".well { max-width: 20em; }"),
# Tags:
tags$head(
tags$style(type="text/css", "select[multiple] { width: 100%; height:10em}"),
tags$style(type="text/css", "select { width: 100%}"),
tags$style(type="text/css", "input { width: 19em; max-width:100%}")
),
# Select filetype:
selectInput("readFunction", "Function to read data:", c(
# Base R:
"read.table",
"read.csv",
"read.csv2",
"read.delim",
"read.delim2",
# foreign functions:
"read.spss",
"read.arff",
"read.dbf",
"read.dta",
"read.epiiinfo",
"read.mtp",
"read.octave",
"read.ssd",
"read.systat",
"read.xport",
# Advanced functions:
"scan",
"readLines"
)),
# Argument selecter:
htmlOutput("ArgSelect"),
# Argument field:
htmlOutput("ArgText"),
# Upload data:
fileInput("file", "Upload data-file:"),
# Variable selection:
htmlOutput("varselect"),
br(),
textInput("name","Dataset name:","Data"),
downloadLink('downloadDump', 'Download source'),
downloadLink('downloadSave', 'Download binary')
),
# Main:
mainPanel(
tableOutput("table")
)
)
server <- shinyServer(function(input, output) {
### Argument names:
ArgNames <- reactive({
Names <- names(formals(input$readFunction)[-1])
Names <- Names[Names!="..."]
return(Names)
})
# Argument selector:
output$ArgSelect <- renderUI({
if (length(ArgNames())==0) return(NULL)
selectInput("arg","Argument:",ArgNames())
})
## Arg text field:
output$ArgText <- renderUI({
fun__arg <- paste0(input$readFunction,"__",input$arg)
if (is.null(input$arg)) return(NULL)
Defaults <- formals(input$readFunction)
if (is.null(input[[fun__arg]]))
{
textInput(fun__arg, label = "Enter value:", value = deparse(Defaults[[input$arg]]))
} else {
textInput(fun__arg, label = "Enter value:", value = input[[fun__arg]])
}
})
### Data import:
Dataset <- reactive({
if (is.null(input$file)) {
# User has not uploaded a file yet
return(data.frame())
}
args <- grep(paste0("^",input$readFunction,"__"), names(input), value = TRUE)
argList <- list()
for (i in seq_along(args))
{
argList[[i]] <- eval(parse(text=input[[args[i]]]))
}
names(argList) <- gsub(paste0("^",input$readFunction,"__"),"",args)
argList <- argList[names(argList) %in% ArgNames()]
Dataset <- as.data.frame(do.call(input$readFunction,c(list(input$file$datapath),argList)))
return(Dataset)
})
# Select variables:
output$varselect <- renderUI({
if (identical(Dataset(), '') || identical(Dataset(),data.frame())) return(NULL)
# Variable selection:
selectInput("vars", "Variables to use:",
names(Dataset()), names(Dataset()), multiple =TRUE)
})
# Show table:
output$table <- renderTable({
if (is.null(input$vars) || length(input$vars)==0) return(NULL)
return(Dataset()[,input$vars,drop=FALSE])
})
### Download dump:
output$downloadDump <- downloadHandler(
filename = "Rdata.R",
content = function(con) {
assign(input$name, Dataset()[,input$vars,drop=FALSE])
dump(input$name, con)
}
)
### Download save:
output$downloadSave <- downloadHandler(
filename = "Rdata.RData",
content = function(con) {
assign(input$name, Dataset()[,input$vars,drop=FALSE])
save(list=input$name, file=con)
}
)
})
shinyApp(ui, server)
library("shiny")
library("foreign")
ui <- pageWithSidebar(
# Header:
headerPanel("R data reader"),
# Input in sidepanel:
sidebarPanel(
tags$style(type='text/css', ".well { max-width: 20em; }"),
# Tags:
tags$head(
tags$style(type="text/css", "select[multiple] { width: 100%; height:10em}"),
tags$style(type="text/css", "select { width: 100%}"),
tags$style(type="text/css", "input { width: 19em; max-width:100%}")
),
# Select filetype:
selectInput("readFunction", "Function to read data:", c(
# Base R:
"read.table",
"read.csv",
"read.csv2",
"read.delim",
"read.delim2",
# foreign functions:
"read.spss",
"read.arff",
"read.dbf",
"read.dta",
"read.epiiinfo",
"read.mtp",
"read.octave",
"read.ssd",
"read.systat",
"read.xport",
# Advanced functions:
"scan",
"readLines"
)),
# Argument selecter:
htmlOutput("ArgSelect"),
# Argument field:
htmlOutput("ArgText"),
# Upload data:
fileInput("file", "Upload data-file:"),
# Variable selection:
htmlOutput("varselect"),
br(),
textInput("name","Dataset name:","Data"),
downloadLink('downloadDump', 'Download source'),
downloadLink('downloadSave', 'Download binary')
),
# Main:
mainPanel(
tableOutput("table")
)
)
server <- shinyServer(function(input, output) {
### Argument names:
ArgNames <- reactive({
Names <- names(formals(input$readFunction)[-1])
Names <- Names[Names!="..."]
return(Names)
})
# Argument selector:
output$ArgSelect <- renderUI({
if (length(ArgNames())==0) return(NULL)
selectInput("arg","Argument:",ArgNames())
})
## Arg text field:
output$ArgText <- renderUI({
fun__arg <- paste0(input$readFunction,"__",input$arg)
if (is.null(input$arg)) return(NULL)
Defaults <- formals(input$readFunction)
if (is.null(input[[fun__arg]]))
{
textInput(fun__arg, label = "Enter value:", value = deparse(Defaults[[input$arg]]))
} else {
textInput(fun__arg, label = "Enter value:", value = input[[fun__arg]])
}
})
### Data import:
Dataset <- reactive({
if (is.null(input$file)) {
# User has not uploaded a file yet
return(data.frame())
}
args <- grep(paste0("^",input$readFunction,"__"), names(input), value = TRUE)
argList <- list()
for (i in seq_along(args))
{
argList[[i]] <- eval(parse(text=input[[args[i]]]))
}
names(argList) <- gsub(paste0("^",input$readFunction,"__"),"",args)
argList <- argList[names(argList) %in% ArgNames()]
Dataset <- as.data.frame(do.call(input$readFunction,c(list(input$file$datapath),argList)))
return(Dataset)
})
# Select variables:
output$varselect <- renderUI({
if (identical(Dataset(), '') || identical(Dataset(),data.frame())) return(NULL)
# Variable selection:
selectInput("vars", "Variables to use:",
names(Dataset()), names(Dataset()), multiple =TRUE)
})
# Show table:
output$table <- renderTable({
if (is.null(input$vars) || length(input$vars)==0) return(NULL)
return(Dataset()[,input$vars,drop=FALSE])
})
### Download dump:
output$downloadDump <- downloadHandler(
filename = "Rdata.R",
content = function(con) {
assign(input$name, Dataset()[,input$vars,drop=FALSE])
dump(input$name, con)
}
)
### Download save:
output$downloadSave <- downloadHandler(
filename = "Rdata.RData",
content = function(con) {
assign(input$name, Dataset()[,input$vars,drop=FALSE])
save(list=input$name, file=con)
}
)
})
shinyApp(ui, server)
update.packages(ask = F)
update.packages(ask = F, checkBuilt = T)
update.packages(ask = F)
library(rvest)
library(furrr)
library(tidyverse)
a <- read_html("https://referensi.data.kemdikbud.go.id/tabs.php?npsn=20601874") %>%
html_nodes("td td:nth-child(2), #tabs-6 td:nth-child(2), #tabs-2 td:nth-child(2)") %>%
html_text()
a
b <- read_html("https://referensi.data.kemdikbud.go.id/tabs.php?npsn=20601874") %>%
html_nodes("td td:nth-child(4), #tabs-6 td:nth-child(4), #tabs-2 td:nth-child(4)") %>%
html_text()
b
tibble(a, b)
read_html("https://referensi.data.kemdikbud.go.id/tabs.php?npsn=20601874") %>% {
tibble(
key = html_nodes(., "td td:nth-child(2), #tabs-6 td:nth-child(2), #tabs-2 td:nth-child(2)") %>%
html_text(),
value = html_nodes(., "td td:nth-child(4), #tabs-6 td:nth-child(4), #tabs-2 td:nth-child(4)") %>%
html_text()
)
} %>%
mutate(
key = janitor::make_clean_names(key)
) %>%
pivot_wider(names_from = "key", values_from = "value")
scrap_op <- function(x) {
read_html(x) %>% {
tibble(
key = html_nodes(., "td td:nth-child(2), #tabs-6 td:nth-child(2), #tabs-2 td:nth-child(2)") %>%
html_text(),
value = html_nodes(., "td td:nth-child(4), #tabs-6 td:nth-child(4), #tabs-2 td:nth-child(4)") %>%
html_text()
)
} %>%
mutate(
key = janitor::make_clean_names(key)
) %>%
pivot_wider(names_from = "key", values_from = "value")
}
scrap_op(x = "https://referensi.data.kemdikbud.go.id/tabs.php?npsn=20601874")
library(readxl)
npsn1 <- read_excel("G:/My Drive/DATABASE MHS/SMA19.xlsx")
npsn2 <- read_excel("G:/My Drive/DATABASE MHS/SMA19_new.xlsx",
sheet = "SMA")
npsn3 <- read_excel("G:/My Drive/DATABASE MHS/SMA19_new.xlsx",
sheet = "SMK")
npsn <- rbind(npsn1[,1], npsn2[,1], npsn3[,1])
npsn <- unique(npsn)
npsn[which(is.na(npsn)),]
dim(npsn)
npsn$npsn <- as.numeric(npsn$npsn)
npsn[which(is.na(npsn)),]
npsn <- na.omit(npsn)
dim(npsn)
# create a list of all installed packages
ip <- as.data.frame(installed.packages())
head(ip)
ip
dim(ip)
library(tidymodels)
install.packages("tidymodels")
install.packages("rstanarm")
library(gt)
library(tidyverse)
library(glue)
# Define the start and end dates for the data range
start_date <- "2010-06-07"
end_date <- "2010-06-14"
# Create a gt table based on preprocessed
# `sp500` table data
sp500 %>%
dplyr::filter(date >= start_date & date <= end_date) %>%
dplyr::select(-adj_close) %>%
gt() %>%
tab_header(
title = "S&P 500",
subtitle = glue::glue("{start_date} to {end_date}")
) %>%
fmt_date(
columns = vars(date),
date_style = 3
) %>%
fmt_currency(
columns = vars(open, high, low, close),
currency = "IDR"
) %>%
fmt_number(
columns = vars(volume),
suffixing = T
)
# Create a gt table based on preprocessed
# `sp500` table data
sp500 %>%
dplyr::filter(date >= start_date & date <= end_date) %>%
dplyr::select(-adj_close) %>%
gt() %>%
tab_header(
title = "S&P 500",
subtitle = glue::glue("{start_date} sampai {end_date}")
) %>%
fmt_date(
columns = vars(date),
date_style = 3
) %>%
fmt_currency(
columns = vars(open, high, low, close),
currency = "IDR"
) %>%
fmt_number(
columns = vars(volume),
suffixing = T
)
# Create a gt table based on preprocessed
# `sp500` table data
sp500 %>%
dplyr::filter(date >= start_date & date <= end_date) %>%
dplyr::select(-adj_close) %>%
gt() %>%
tab_header(
title = "S&P 500",
subtitle = glue::glue("{start_date} sampai {end_date}")
) %>%
fmt_date(
columns = vars(date),
date_style = 3
) %>%
fmt_currency(
columns = vars(open, high, low, close),
currency = "IDR"
) %>%
fmt_number(
columns = vars(volume),
suffixing = F
)
# Create a gt table based on preprocessed
# `sp500` table data
sp500 %>%
dplyr::filter(date >= start_date & date <= end_date) %>%
dplyr::select(-adj_close) %>%
gt() %>%
tab_header(
title = "S&P 500",
subtitle = glue::glue("{start_date} sampai {end_date}")
) %>%
fmt_date(
columns = vars(date),
date_style = 3
) %>%
fmt_currency(
columns = vars(open, high, low, close),
currency = "IDR"
) %>%
fmt_number(
columns = vars(volume),
suffixing = T
)
library(ggplot2)
str(mpg)
glimpse(mpg)
summary(mpg)
ggplot(data = mpg, aes(x = cty, y = hwy))
qplot(x = cty, y = hwy, data = mpg, geom = "point")
ggplot(data = mpg, aes(x = cty, y = hwy)) + geom_point()
reticulate::repl_python()
# Solution
# Read the input from user
print("Given a duration of time as follow")
d = int(input("Enter the number of days: "))
h = int(input("Enter the number of hours: "))
m = int(input("Enter the number of minutes: "))
s = int(input("Enter the number of seconds: "))
# Convert the duration into seconds
d_s = s + m * 60 + h * 60 ** 2 + d * 60 ** 2 * 24
# Display the result
print("%d days, %d hours, %d minutes, and %d seconds is equal with %d seconds" (d, h, m, s, d_s))
# Solution
# Read the input from user
print("Given a duration of time as follow")
d = int(input("Enter the number of days: "))
1
h = int(input("Enter the number of hours: "))
1
m = int(input("Enter the number of minutes: "))
1
s = int(input("Enter the number of seconds: "))
10
# Convert the duration into seconds
d_s = s + m * 60 + h * 60 ** 2 + d * 60 ** 2 * 24
# Display the result
print("%d days, %d hours, %d minutes, and %d seconds is equal with %d seconds" (d, h, m, s, d_s))
print("%d days, %d hours, %d minutes, and %d seconds is equal with %d seconds" % (d, h, m, s, d_s))
install.packages("semPLS")
library("semPLS")
reticulate::repl_python()
print("Given a duration of time as follow")
d = int(input("Enter the number of days: "))
13
h = int(input("Enter the number of hours: "))
12
m = int(input("Enter the number of minutes: "))
12
s = int(input("Enter the number of seconds: "))
12
# Convert the duration into seconds
d_s = s + m * 60 + h * 60 ** 2 + d * 60 ** 2 * 24
# Display the result
print("%d days, %d hours, %d minutes, and %d seconds is equal with %d seconds" % (d, h, m, s, d_s))
setwd("~/Dashboard")
