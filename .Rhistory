setwd("~/Github Publish/Corona")
rmarkdown::render_site()
rmarkdown::render_site()
setwd("~/Dashboard")
rmarkdown::render_site()
setwd("~/Github Publish/Corona")
rmarkdown::serve.site()
rmarkdown::render_site()
install.packages("tidymodel")
install.packages("tidymodels")
library(tidymodel)
library(tidymodels)
urchins <-
# Data were assembled for a tutorial
# at https://www.flutterbys.com.au/stats/tut/tut7.5a.html
read_csv("https://tidymodels.org/start/models/urchins.csv") %>%
# Change the names to be a little more verbose
setNames(c("food_regime", "initial_volume", "width")) %>%
# Factors are very helpful for modeling, so we convert one column
mutate(food_regime = factor(food_regime, levels = c("Initial", "Low", "High")))
urchins
ggplot(urchins,
aes(x = initial_volume,
y = width,
group = food_regime,
col = food_regime)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
scale_color_viridis_d(option = "plasma", end = .7)
ggplot(urchins,
aes(x = initial_volume,
y = width,
group = food_regime,
col = food_regime))
ggplot(urchins,
aes(x = initial_volume,
y = width,
group = food_regime,
col = food_regime)) +
geom_point()
ggplot(urchins,
aes(x = initial_volume,
y = width,
group = food_regime,
col = food_regime)) +
geom_point() +
geom_smooth(method = lm)
ggplot(urchins,
aes(x = initial_volume,
y = width,
group = food_regime,
col = food_regime)) +
geom_point() +
ggplot(urchins,
aes(x = initial_volume,
y = width,
group = food_regime,
col = food_regime)) +
geom_point()
ggplot(urchins,
aes(x = initial_volume,
y = width,
group = food_regime,
col = food_regime))
ggplot(urchins,
aes(x = initial_volume,
y = width,
group = food_regime,
col = food_regime)) +
geom_point()
ggplot(urchins,
aes(x = initial_volume,
y = width,
group = food_regime,
col = food_regime)) +
geom_point() +
geom_smooth(method = lm)
ggplot(urchins,
aes(x = initial_volume,
y = width,
group = food_regime,
col = food_regime)) +
geom_point() +
geom_smooth(method = lm, se = F)
ggplot(urchins,
aes(x = initial_volume,
y = width,
group = food_regime,
col = food_regime)) +
geom_point() +
geom_smooth(method = lm, se = T)
ggplot(urchins,
aes(x = initial_volume,
y = width,
group = food_regime,
col = food_regime)) +
geom_point() +
geom_smooth(method = lm, se = F)
ggplot(urchins,
aes(x = initial_volume,
y = width,
group = food_regime,
col = food_regime)) +
geom_point() +
geom_smooth(method = lm, se = F) +
scale_color_viridis_d(option = "plasma")
ggplot(urchins,
aes(x = initial_volume,
y = width,
group = food_regime,
col = food_regime)) +
geom_point() +
geom_smooth(method = lm, se = F) +
scale_color_viridis_d(option = "plasma", end = 0.7)
ggplot(urchins,
aes(x = initial_volume,
y = width,
group = food_regime,
col = food_regime)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
scale_color_viridis_d(option = "plasma", end = .7)
linear_reg()
linear_reg() %>%
set_engine("lm")
lm_mod <-
linear_reg() %>%
set_engine("lm")
lm_mod
lm_fit <-
lm_mod %>%
fit(width ~ initial_volume * food_regime, data = urchins)
lm_fit
tidy(lm_fit)
new_points <- expand.grid(initial_volume = 20,
food_regime = c("Initial", "Low", "High"))
new_points
mean_pred <- predict(lm_fit, new_data = new_points)
mean_pred
conf_int_pred <- predict(lm_fit,
new_data = new_points,
type = "conf_int")
conf_int_pred
plot_data <-
new_points %>%
bind_cols(mean_pred) %>%
bind_cols(conf_int_pred)
plot_data
ggplot(plot_data, aes(x = food_regime))
ggplot(plot_data, aes(x = food_regime)) +
geom_point(aes(y = .pred))
ggplot(plot_data, aes(x = food_regime)) +
geom_point(aes(y = .pred)) +
geom_errorbar(aes(ymin = .pred_lower,
ymax = .pred_upper),
width = .2) +
labs(y = "urchin size")
# set the prior distribution
prior_dist <- rstanarm::student_t(df = 1)
prior_dist
# make the parsnip model
bayes_mod <-
linear_reg() %>%
set_engine("stan",
prior_intercept = prior_dist,
prior = prior_dist)
# train the model
bayes_fit <-
bayes_mod %>%
fit(width ~ initial_volume * food_regime, data = urchins)
print(bayes_fit, digits = 5)
tidy(bayes_fit, intervals = TRUE)
bayes_plot_data <-
new_points %>%
bind_cols(predict(bayes_fit, new_data = new_points)) %>%
bind_cols(predict(bayes_fit, new_data = new_points, type = "conf_int"))
ggplot(bayes_plot_data, aes(x = food_regime)) +
geom_point(aes(y = .pred)) +
geom_errorbar(aes(ymin = .pred_lower, ymax = .pred_upper), width = .2) +
labs(y = "urchin size") +
ggtitle("Bayesian model with t(1) prior distribution")
urchins %>%
group_by(food_regime) %>%
summarize(med_vol = median(initial_volume))
bayes_mod %>%
fit(width ~ initial_volume * food_regime, data = urchins)
ggplot(urchins,
aes(initial_volume, width))
ggplot(urchins,
aes(initial_volume, width)) +      # returns a ggplot object
geom_jitter()
ggplot(urchins,
aes(initial_volume, width)) +      # returns a ggplot object
geom_jitter() +                         # same
geom_smooth(method = lm, se = FALSE)
ggplot(urchins,
aes(initial_volume, width)) +      # returns a ggplot object
geom_jitter() +                         # same
geom_smooth(method = lm, se = FALSE) +  # same
labs(x = "Volume", y = "Width")
setwd("~/Dashboard")
rmarkdown::render_site()
