filename = "Rdata.RData",
content = function(con) {
assign(input$name, Dataset()[,input$vars,drop=FALSE])
save(list=input$name, file=con)
}
)
})
library(shiny)
ui <- fluidPage(
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library("shiny")
library("foreign")
shinyUI(pageWithSidebar(
# Header:
headerPanel("R data reader"),
# Input in sidepanel:
sidebarPanel(
tags$style(type='text/css', ".well { max-width: 20em; }"),
# Tags:
tags$head(
tags$style(type="text/css", "select[multiple] { width: 100%; height:10em}"),
tags$style(type="text/css", "select { width: 100%}"),
tags$style(type="text/css", "input { width: 19em; max-width:100%}")
),
# Select filetype:
selectInput("readFunction", "Function to read data:", c(
# Base R:
"read.table",
"read.csv",
"read.csv2",
"read.delim",
"read.delim2",
# foreign functions:
"read.spss",
"read.arff",
"read.dbf",
"read.dta",
"read.epiiinfo",
"read.mtp",
"read.octave",
"read.ssd",
"read.systat",
"read.xport",
# Advanced functions:
"scan",
"readLines"
)),
# Argument selecter:
htmlOutput("ArgSelect"),
# Argument field:
htmlOutput("ArgText"),
# Upload data:
fileInput("file", "Upload data-file:"),
# Variable selection:
htmlOutput("varselect"),
br(),
textInput("name","Dataset name:","Data"),
downloadLink('downloadDump', 'Download source'),
downloadLink('downloadSave', 'Download binary')
),
# Main:
mainPanel(
tableOutput("table")
)
))
shinyServer(function(input, output) {
### Argument names:
ArgNames <- reactive({
Names <- names(formals(input$readFunction)[-1])
Names <- Names[Names!="..."]
return(Names)
})
# Argument selector:
output$ArgSelect <- renderUI({
if (length(ArgNames())==0) return(NULL)
selectInput("arg","Argument:",ArgNames())
})
## Arg text field:
output$ArgText <- renderUI({
fun__arg <- paste0(input$readFunction,"__",input$arg)
if (is.null(input$arg)) return(NULL)
Defaults <- formals(input$readFunction)
if (is.null(input[[fun__arg]]))
{
textInput(fun__arg, label = "Enter value:", value = deparse(Defaults[[input$arg]]))
} else {
textInput(fun__arg, label = "Enter value:", value = input[[fun__arg]])
}
})
### Data import:
Dataset <- reactive({
if (is.null(input$file)) {
# User has not uploaded a file yet
return(data.frame())
}
args <- grep(paste0("^",input$readFunction,"__"), names(input), value = TRUE)
argList <- list()
for (i in seq_along(args))
{
argList[[i]] <- eval(parse(text=input[[args[i]]]))
}
names(argList) <- gsub(paste0("^",input$readFunction,"__"),"",args)
argList <- argList[names(argList) %in% ArgNames()]
Dataset <- as.data.frame(do.call(input$readFunction,c(list(input$file$datapath),argList)))
return(Dataset)
})
# Select variables:
output$varselect <- renderUI({
if (identical(Dataset(), '') || identical(Dataset(),data.frame())) return(NULL)
# Variable selection:
selectInput("vars", "Variables to use:",
names(Dataset()), names(Dataset()), multiple =TRUE)
})
# Show table:
output$table <- renderTable({
if (is.null(input$vars) || length(input$vars)==0) return(NULL)
return(Dataset()[,input$vars,drop=FALSE])
})
### Download dump:
output$downloadDump <- downloadHandler(
filename = "Rdata.R",
content = function(con) {
assign(input$name, Dataset()[,input$vars,drop=FALSE])
dump(input$name, con)
}
)
### Download save:
output$downloadSave <- downloadHandler(
filename = "Rdata.RData",
content = function(con) {
assign(input$name, Dataset()[,input$vars,drop=FALSE])
save(list=input$name, file=con)
}
)
})
library("shiny")
library("foreign")
ui <- pageWithSidebar(
# Header:
headerPanel("R data reader"),
# Input in sidepanel:
sidebarPanel(
tags$style(type='text/css', ".well { max-width: 20em; }"),
# Tags:
tags$head(
tags$style(type="text/css", "select[multiple] { width: 100%; height:10em}"),
tags$style(type="text/css", "select { width: 100%}"),
tags$style(type="text/css", "input { width: 19em; max-width:100%}")
),
# Select filetype:
selectInput("readFunction", "Function to read data:", c(
# Base R:
"read.table",
"read.csv",
"read.csv2",
"read.delim",
"read.delim2",
# foreign functions:
"read.spss",
"read.arff",
"read.dbf",
"read.dta",
"read.epiiinfo",
"read.mtp",
"read.octave",
"read.ssd",
"read.systat",
"read.xport",
# Advanced functions:
"scan",
"readLines"
)),
# Argument selecter:
htmlOutput("ArgSelect"),
# Argument field:
htmlOutput("ArgText"),
# Upload data:
fileInput("file", "Upload data-file:"),
# Variable selection:
htmlOutput("varselect"),
br(),
textInput("name","Dataset name:","Data"),
downloadLink('downloadDump', 'Download source'),
downloadLink('downloadSave', 'Download binary')
),
# Main:
mainPanel(
tableOutput("table")
)
)
server <- shinyServer(function(input, output) {
### Argument names:
ArgNames <- reactive({
Names <- names(formals(input$readFunction)[-1])
Names <- Names[Names!="..."]
return(Names)
})
# Argument selector:
output$ArgSelect <- renderUI({
if (length(ArgNames())==0) return(NULL)
selectInput("arg","Argument:",ArgNames())
})
## Arg text field:
output$ArgText <- renderUI({
fun__arg <- paste0(input$readFunction,"__",input$arg)
if (is.null(input$arg)) return(NULL)
Defaults <- formals(input$readFunction)
if (is.null(input[[fun__arg]]))
{
textInput(fun__arg, label = "Enter value:", value = deparse(Defaults[[input$arg]]))
} else {
textInput(fun__arg, label = "Enter value:", value = input[[fun__arg]])
}
})
### Data import:
Dataset <- reactive({
if (is.null(input$file)) {
# User has not uploaded a file yet
return(data.frame())
}
args <- grep(paste0("^",input$readFunction,"__"), names(input), value = TRUE)
argList <- list()
for (i in seq_along(args))
{
argList[[i]] <- eval(parse(text=input[[args[i]]]))
}
names(argList) <- gsub(paste0("^",input$readFunction,"__"),"",args)
argList <- argList[names(argList) %in% ArgNames()]
Dataset <- as.data.frame(do.call(input$readFunction,c(list(input$file$datapath),argList)))
return(Dataset)
})
# Select variables:
output$varselect <- renderUI({
if (identical(Dataset(), '') || identical(Dataset(),data.frame())) return(NULL)
# Variable selection:
selectInput("vars", "Variables to use:",
names(Dataset()), names(Dataset()), multiple =TRUE)
})
# Show table:
output$table <- renderTable({
if (is.null(input$vars) || length(input$vars)==0) return(NULL)
return(Dataset()[,input$vars,drop=FALSE])
})
### Download dump:
output$downloadDump <- downloadHandler(
filename = "Rdata.R",
content = function(con) {
assign(input$name, Dataset()[,input$vars,drop=FALSE])
dump(input$name, con)
}
)
### Download save:
output$downloadSave <- downloadHandler(
filename = "Rdata.RData",
content = function(con) {
assign(input$name, Dataset()[,input$vars,drop=FALSE])
save(list=input$name, file=con)
}
)
})
shinyApp(ui, server)
library("shiny")
library("foreign")
ui <- pageWithSidebar(
# Header:
headerPanel("R data reader"),
# Input in sidepanel:
sidebarPanel(
tags$style(type='text/css', ".well { max-width: 20em; }"),
# Tags:
tags$head(
tags$style(type="text/css", "select[multiple] { width: 100%; height:10em}"),
tags$style(type="text/css", "select { width: 100%}"),
tags$style(type="text/css", "input { width: 19em; max-width:100%}")
),
# Select filetype:
selectInput("readFunction", "Function to read data:", c(
# Base R:
"read.table",
"read.csv",
"read.csv2",
"read.delim",
"read.delim2",
# foreign functions:
"read.spss",
"read.arff",
"read.dbf",
"read.dta",
"read.epiiinfo",
"read.mtp",
"read.octave",
"read.ssd",
"read.systat",
"read.xport",
# Advanced functions:
"scan",
"readLines"
)),
# Argument selecter:
htmlOutput("ArgSelect"),
# Argument field:
htmlOutput("ArgText"),
# Upload data:
fileInput("file", "Upload data-file:"),
# Variable selection:
htmlOutput("varselect"),
br(),
textInput("name","Dataset name:","Data"),
downloadLink('downloadDump', 'Download source'),
downloadLink('downloadSave', 'Download binary')
),
# Main:
mainPanel(
tableOutput("table")
)
)
server <- shinyServer(function(input, output) {
### Argument names:
ArgNames <- reactive({
Names <- names(formals(input$readFunction)[-1])
Names <- Names[Names!="..."]
return(Names)
})
# Argument selector:
output$ArgSelect <- renderUI({
if (length(ArgNames())==0) return(NULL)
selectInput("arg","Argument:",ArgNames())
})
## Arg text field:
output$ArgText <- renderUI({
fun__arg <- paste0(input$readFunction,"__",input$arg)
if (is.null(input$arg)) return(NULL)
Defaults <- formals(input$readFunction)
if (is.null(input[[fun__arg]]))
{
textInput(fun__arg, label = "Enter value:", value = deparse(Defaults[[input$arg]]))
} else {
textInput(fun__arg, label = "Enter value:", value = input[[fun__arg]])
}
})
### Data import:
Dataset <- reactive({
if (is.null(input$file)) {
# User has not uploaded a file yet
return(data.frame())
}
args <- grep(paste0("^",input$readFunction,"__"), names(input), value = TRUE)
argList <- list()
for (i in seq_along(args))
{
argList[[i]] <- eval(parse(text=input[[args[i]]]))
}
names(argList) <- gsub(paste0("^",input$readFunction,"__"),"",args)
argList <- argList[names(argList) %in% ArgNames()]
Dataset <- as.data.frame(do.call(input$readFunction,c(list(input$file$datapath),argList)))
return(Dataset)
})
# Select variables:
output$varselect <- renderUI({
if (identical(Dataset(), '') || identical(Dataset(),data.frame())) return(NULL)
# Variable selection:
selectInput("vars", "Variables to use:",
names(Dataset()), names(Dataset()), multiple =TRUE)
})
# Show table:
output$table <- renderTable({
if (is.null(input$vars) || length(input$vars)==0) return(NULL)
return(Dataset()[,input$vars,drop=FALSE])
})
### Download dump:
output$downloadDump <- downloadHandler(
filename = "Rdata.R",
content = function(con) {
assign(input$name, Dataset()[,input$vars,drop=FALSE])
dump(input$name, con)
}
)
### Download save:
output$downloadSave <- downloadHandler(
filename = "Rdata.RData",
content = function(con) {
assign(input$name, Dataset()[,input$vars,drop=FALSE])
save(list=input$name, file=con)
}
)
})
shinyApp(ui, server)
update.packages(ask = F)
update.packages(ask = F, checkBuilt = T)
library(rvest)
library(furrr)
library(tidyverse)
a <- read_html("https://referensi.data.kemdikbud.go.id/tabs.php?npsn=20601874") %>%
html_nodes("td td:nth-child(2), #tabs-6 td:nth-child(2), #tabs-2 td:nth-child(2)") %>%
html_text()
a
b <- read_html("https://referensi.data.kemdikbud.go.id/tabs.php?npsn=20601874") %>%
html_nodes("td td:nth-child(4), #tabs-6 td:nth-child(4), #tabs-2 td:nth-child(4)") %>%
html_text()
b
tibble(a, b)
read_html("https://referensi.data.kemdikbud.go.id/tabs.php?npsn=20601874") %>% {
tibble(
key = html_nodes(., "td td:nth-child(2), #tabs-6 td:nth-child(2), #tabs-2 td:nth-child(2)") %>%
html_text(),
value = html_nodes(., "td td:nth-child(4), #tabs-6 td:nth-child(4), #tabs-2 td:nth-child(4)") %>%
html_text()
)
} %>%
mutate(
key = janitor::make_clean_names(key)
) %>%
pivot_wider(names_from = "key", values_from = "value")
scrap_op <- function(x) {
read_html(x) %>% {
tibble(
key = html_nodes(., "td td:nth-child(2), #tabs-6 td:nth-child(2), #tabs-2 td:nth-child(2)") %>%
html_text(),
value = html_nodes(., "td td:nth-child(4), #tabs-6 td:nth-child(4), #tabs-2 td:nth-child(4)") %>%
html_text()
)
} %>%
mutate(
key = janitor::make_clean_names(key)
) %>%
pivot_wider(names_from = "key", values_from = "value")
}
scrap_op(x = "https://referensi.data.kemdikbud.go.id/tabs.php?npsn=20601874")
library(readxl)
npsn1 <- read_excel("G:/My Drive/DATABASE MHS/SMA19.xlsx",
col_types = c("numeric", "skip", "skip",
"skip", "skip"))
npsn2 <- read_excel("G:/My Drive/DATABASE MHS/SMA19_new.xlsx",
sheet = "SMA",
col_types = c("numeric", "skip", "skip",
"skip", "skip", "skip"))
npsn1 <- read_excel("G:/My Drive/DATABASE MHS/SMA19.xlsx",
col_types = c("character", "skip", "skip",
"skip", "skip"))
npsn1 <- read_excel("G:/My Drive/DATABASE MHS/SMA19.xlsx")
npsn1 <- read_excel("G:/My Drive/DATABASE MHS/SMA19.xlsx")
npsn2 <- read_excel("G:/My Drive/DATABASE MHS/SMA19_new.xlsx",
sheet = "SMA")
npsn3 <- read_excel("G:/My Drive/DATABASE MHS/SMA19_new.xlsx",
sheet = "SMK")
npsn <- rbind(npsn1[,1], npsn2[,1], npsn3[,1])
npsn <- unique(npsn)
url_op <- paste0("https://referensi.data.kemdikbud.go.id/tabs.php?npsn=",
npsn$npsn)
url_op
plan(multiprocess)
op_raw <- future_map_dfr(url_op, possibly(scrap_op, otherwise = NULL), .progress = T)
op_raw
npsn$npsn <- as.numeric(npsn$npsn)
npsn
summary(npsn)
summary(npsn1)
summary(npsn2)
npsn1$npsn
npsn1 <- read_excel("G:/My Drive/DATABASE MHS/SMA19.xlsx", col_types = "numeric")
npsn1 <- read_excel("G:/My Drive/DATABASE MHS/SMA19.xlsx")
npsn2 <- read_excel("G:/My Drive/DATABASE MHS/SMA19_new.xlsx",
sheet = "SMA")
npsn3 <- read_excel("G:/My Drive/DATABASE MHS/SMA19_new.xlsx",
sheet = "SMK")
npsn <- rbind(npsn1[,1], npsn2[,1], npsn3[,1])
dim(npsn)
head(npsn)
tail(npsn)
npsn$npsn*1
npsn$npsn <- as.numeric(npsn$npsn)
npsn <- rbind(npsn1[,1], npsn2[,1], npsn3[,1])
summary(npsn)
na.omit(npsn)
npsn <- unique(npsn)
npsn <- na.omit(npsn)
npsn
npsn$npsn <- as.numeric(npsn$npsn)
npsn
min(npsn$npsn)
npsn <- rbind(npsn1[,1], npsn2[,1], npsn3[,1])
npsn <- unique(npsn)
npsn <- na.omit(npsn)
npsn$cek <- npsn$npsn
npsn
npsn$npsn <- as.numeric(npsn$npsn)
which(is.na(npsn))
npsn[which(is.na(npsn)),]
npsn <- rbind(npsn1[,1], npsn2[,1], npsn3[,1])
npsn <- unique(npsn)
npsn[which(is.na(npsn)),]
npsn$npsn <- as.numeric(npsn$npsn)
npsn[which(is.na(npsn)),]
npsn[which(is.na(npsn)),]
npsn <- na.omit(npsn)
npsn[which(is.na(npsn)),]
url_op <- paste0("https://referensi.data.kemdikbud.go.id/tabs.php?npsn=",
npsn$npsn)
url_op
dim(npsn)
plan(multiprocess)
start <- Sys.time()
op_raw <- future_map_dfr(url_op, possibly(scrap_op, otherwise = NULL), .progress = T)
end <- Sys.time()
end - start
op_raw
setwd("G:/My Drive/Dian/R/Aswan")
write.csv(op_raw, "detil_sma.csv")
setwd("~/Dashboard")
